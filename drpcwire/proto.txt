header
    10 bits length (total bytes following the header)
    1  bit continuation
    1  bit starting
    4  bits control
        0: reserved
        1: invoke
        2: message
        3: error
        4. cancel
        5. close
        6. close send
        7-15: unused

    varint stream id
    varint message id

payload
    0: n/a
    1: rpc name
    2: message data
    3: error data
    4: empty
    5: empty
    6: empty

- any protocol errors close the transport
- it is a protocol error to use a stream/message id of 0
- the first time a stream id/message id pair is used, the starting bit
  must be set. it is a protocol error if not
- the first time a stream id/message id pair is used with the
  continuation bit unset, the message is no longer in use
- messages are handled in the order they finish being sent which is
  when the continuation is unset
- it is a protocol error to send different control bits for the same
  active stream id/message id pair
- it is a protocol error for a server to send invoke to a client
- invoke both allocates the stream id that messages will flow on and
  chooses the rpc
- it is a protocol error for a client to send two invokes on the same stream
- clients and servers may arbitarily close streams if too much
  buffered data or messages are present
- it is a protocol error to send data for payloads with empty bodies
- it is a protocol error to send a packet that requires a paylod body
  with no body
- it is a protocol error to reuse a stream id after it has been terminated
  in some way (error, close, cancel, both sides close send)
